global:
  slack:
    bot_token: "${SLACK_BOT_TOKEN}"
    channel_id: "${SLACK_CHANNEL_ID}" # Slack channel ID (e.g., C1234567890)
  log_level: "info"
  # Schedule using cron expression format:
  # - "0 2 * * *" (daily at 2 AM)
  # - "*/15 * * * *" (every 15 minutes)
  # - "0 */6 * * *" (every 6 hours)
  # - "0 0 * * 0" (weekly on Sunday at midnight)
  schedule: "0 2 * * *" # Daily at 2 AM in specified timezone
  retention: "30d"
  # Timezone for all cron schedules (IANA timezone format)
  # Examples: UTC, America/New_York, Europe/London, Asia/Tokyo
  # All schedules will be executed in this timezone
  timezone: "UTC"
  temp_dir: "/tmp/db-backup"
  max_parallel_strategies: 2
  # Execute all backup strategies immediately when the service starts
  # This is useful for ensuring backups run right after deployment
  execute_on_startup: false
  retry:
    max_attempts: 3
  timeout:
    backup: "30m"
    upload: "10m"
  s3:
    bucket: "${S3_BUCKET}"
    base_path: "database-backups"
    compression: "gzip"
    credentials:
      access_key: "${AWS_ACCESS_KEY_ID}"
      secret_key: "${AWS_SECRET_ACCESS_KEY}"
      region: "${AWS_REGION}"
  monitoring:
    metrics:
      enabled: true
      port: 8080
      path: "/metrics"
    health_check:
      port: 8080
      path: "/health"

strategies:
  - name: "postgres-prod"
    database_type: "postgres" # Options: postgres, mysql, mariadb, mongodb
    database_url: "${POSTGRES_DATABASE_URL}"
    # Cron format: every 6 hours starting at 3 AM
    schedule: "0 3,9,15,21 * * *"
    slack:
      channel_id: "${SLACK_CRITICAL_CHANNEL_ID}" # Override for critical alerts

  - name: "mysql-app"
    database_type: "mysql"
    database_url: "${MYSQL_DATABASE_URL}"
    # Every 12 hours (at midnight and noon)
    schedule: "0 0,12 * * *"

  - name: "mongodb-logs"
    database_type: "mongodb"
    database_url: "${MONGODB_DATABASE_URL}"
    # Daily at 1 AM
    schedule: "0 1 * * *"
