services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: example-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: example-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO Client - Create bucket and setup
  minio-setup:
    image: minio/mc:latest
    container_name: example-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb myminio/backup-bucket --ignore-existing;
      mc anonymous set public myminio/backup-bucket;
      echo 'MinIO setup complete';
      "

  # Data Generator - Inserts random data into PostgreSQL
  data-generator:
    image: postgres:15-alpine
    container_name: example-data-generator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: testdb
      PGUSER: testuser
      PGPASSWORD: testpass
    volumes:
      - ./generate-data.sh:/generate-data.sh
    command: >
      /bin/sh -c "
      chmod +x /generate-data.sh;
      while true; do
        /generate-data.sh;
        sleep 30;
      done
      "

  # Easy Backup Service
  easy-backup:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: example-easy-backup
    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - ./backup-config.yaml:/app/config.yaml
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:

networks:
  default:
    name: easy-backup-network
